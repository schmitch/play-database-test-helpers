package de.gccc.test.database

import java.sql.{
  Blob,
  CallableStatement,
  Clob,
  Connection,
  DatabaseMetaData,
  NClob,
  PreparedStatement,
  SQLWarning,
  SQLXML,
  Savepoint,
  Statement,
  Struct
}
import java.util.Properties
import java.util.concurrent.Executor
import java.{ sql, util }

class ConnectionNoClose(internalConnection: Connection, noCommit: Boolean) extends Connection {
  private var closed: Boolean = false
  // we only need to rollback to datasource savepoint on close
  override def close(): Unit = {
    closed = true
  }

  override def commit(): Unit = {
    if (!noCommit) {
      internalConnection.commit()
    }
  }
  override def setAutoCommit(autoCommit: Boolean): Unit = {
    internalConnection.setAutoCommit(autoCommit)
  }
  override def releaseSavepoint(savepoint: Savepoint): Unit = internalConnection.releaseSavepoint(savepoint)
  override def rollback(): Unit = {
    if (!noCommit) {
      internalConnection.rollback()
    }
  }
  override def setSavepoint(): Savepoint                 = internalConnection.setSavepoint()
  override def setTransactionIsolation(level: Int): Unit = internalConnection.setTransactionIsolation(level)
  override def getTransactionIsolation: Int              = internalConnection.getTransactionIsolation
  override def setSavepoint(name: String): Savepoint     = internalConnection.setSavepoint(name)
  override def rollback(savepoint: Savepoint): Unit      = internalConnection.rollback(savepoint)

  // other methods
  override def getHoldability: Int                              = internalConnection.getHoldability
  override def setCatalog(catalog: String): Unit                = internalConnection.setCatalog(catalog)
  override def setHoldability(holdability: Int): Unit           = internalConnection.setHoldability(holdability)
  override def prepareStatement(sql: String): PreparedStatement = internalConnection.prepareStatement(sql)
  override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement =
    internalConnection.prepareStatement(sql, resultSetType, resultSetConcurrency)
  override def prepareStatement(sql: String,
      resultSetType: Int,
      resultSetConcurrency: Int,
      resultSetHoldability: Int): PreparedStatement =
    internalConnection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability)
  override def prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement =
    internalConnection.prepareStatement(sql, autoGeneratedKeys)
  override def prepareStatement(sql: String, columnIndexes: Array[Int]): PreparedStatement =
    internalConnection.prepareStatement(sql, columnIndexes)
  override def prepareStatement(sql: String, columnNames: Array[String]): PreparedStatement =
    internalConnection.prepareStatement(sql, columnNames)
  override def createClob(): Clob                               = internalConnection.createClob()
  override def setSchema(schema: String): Unit                  = internalConnection.setSchema(schema)
  override def setClientInfo(name: String, value: String): Unit = internalConnection.setClientInfo(name, value)
  override def setClientInfo(properties: Properties): Unit      = internalConnection.setClientInfo(properties)
  override def createSQLXML(): SQLXML                           = internalConnection.createSQLXML()
  override def getCatalog: String                               = internalConnection.getCatalog
  override def createBlob(): Blob                               = internalConnection.createBlob()
  override def createStatement(): Statement                     = internalConnection.createStatement()
  override def createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement =
    internalConnection.createStatement(resultSetType, resultSetConcurrency)
  override def createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement =
    internalConnection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability)
  override def abort(executor: Executor): Unit             = internalConnection.abort(executor)
  override def getMetaData: DatabaseMetaData               = internalConnection.getMetaData
  override def setReadOnly(readOnly: Boolean): Unit        = internalConnection.setReadOnly(readOnly)
  override def prepareCall(sql: String): CallableStatement = internalConnection.prepareCall(sql)
  override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int): CallableStatement =
    internalConnection.prepareCall(sql, resultSetType, resultSetConcurrency)
  override def prepareCall(sql: String,
      resultSetType: Int,
      resultSetConcurrency: Int,
      resultSetHoldability: Int): CallableStatement =
    internalConnection.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability)
  override def getWarnings: SQLWarning        = internalConnection.getWarnings
  override def nativeSQL(sql: String): String = internalConnection.nativeSQL(sql)
  override def isReadOnly: Boolean            = internalConnection.isReadOnly
  override def createArrayOf(typeName: String, elements: Array[AnyRef]): sql.Array =
    internalConnection.createArrayOf(typeName, elements)
  override def createNClob(): NClob = internalConnection.createNClob()
  override def setNetworkTimeout(executor: Executor, milliseconds: Int): Unit =
    internalConnection.setNetworkTimeout(executor, milliseconds)
  override def setTypeMap(map: util.Map[String, Class[_]]): Unit = internalConnection.setTypeMap(map)
  override def isValid(timeout: Int): Boolean                    = internalConnection.isValid(timeout)
  override def getAutoCommit: Boolean                            = internalConnection.getAutoCommit
  override def clearWarnings(): Unit                             = internalConnection.clearWarnings()
  override def getSchema: String                                 = internalConnection.getSchema
  override def getNetworkTimeout: Int                            = internalConnection.getNetworkTimeout
  override def isClosed: Boolean                                 = closed
  override def createStruct(typeName: String, attributes: Array[AnyRef]): Struct =
    internalConnection.createStruct(typeName, attributes)
  override def getClientInfo(name: String): String    = internalConnection.getClientInfo(name)
  override def getClientInfo: Properties              = internalConnection.getClientInfo
  override def getTypeMap: util.Map[String, Class[_]] = internalConnection.getTypeMap
  override def unwrap[T](iface: Class[T]): T          = internalConnection.unwrap(iface)
  override def isWrapperFor(iface: Class[_]): Boolean = internalConnection.isWrapperFor(iface)
}
